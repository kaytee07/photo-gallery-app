name: Build, Push, and Upload Deployment Bundle.

on:
  push:
    branches: ["main"]

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  ARTIFACT_BUCKET: first-photo-gallery-artifacts # must match your CFN template

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Configure AWS Credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.OIDC_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker build -t $IMAGE_URI .
          docker tag $IMAGE_URI $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      # ... rest of your workflow remains the sames ...

      - name: Generate taskdef.json
        env:
          EcsTaskExecutionRoleArn: arn:aws:iam::714377355835:role/ecs-rds-iam-stack-EcsTaskExecutionRole-0VG1NbvKlqwk
        run: |
          cat > taskdef.json <<EOL
          {
            "family": "spring-boot-task",
            "networkMode": "awsvpc",
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "512",
            "memory": "1024",
            "executionRoleArn": "${EcsTaskExecutionRoleArn}",
            "containerDefinitions": [
              {
                "name": "spring-boot-container",
                "image": "${IMAGE_URI}",
                "portMappings": [
                  {
                    "containerPort": 8080,
                    "protocol": "tcp"
                  }
                ],
                "essential": true
              }
            ]
          }
          EOL

      - name: Register task definition and get ARN
        id: register-taskdef
        run: |
          TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://taskdef.json --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV
          echo "Registered task definition: $TASK_DEF_ARN"

      - name: Generate appspec.yaml with actual task definition ARN
        run: |
          cat > appspec.yaml <<EOL
          version: 0.0
          Resources:
            - TargetService:
                Type: AWS::ECS::Service
                Properties:
                  TaskDefinition: "$TASK_DEF_ARN"
                  LoadBalancerInfo:
                    ContainerName: spring-boot-container
                    ContainerPort: 8080
          EOL
          echo "Generated AppSpec file:"
          cat appspec.yaml

      - name: Package AppSpec bundle
        run: zip photo-gallery-bundle.zip appspec.yaml taskdef.json

      - name: Upload bundle to S3
        run: aws s3 cp photo-gallery-bundle.zip s3://${{ env.ARTIFACT_BUCKET }}/

      - name: Deployment Summary
        run: |
          echo "ðŸš€ Deployment bundle uploaded!"
          echo "- Image: $IMAGE_URI"
          echo "- Task Definition: $TASK_DEF_ARN"
          echo "- Bundle: s3://${{ env.ARTIFACT_BUCKET }}/photo-gallery-bundle.zip"
          echo "- CodePipeline will automatically pick up this artifact."